#!/bin/python
import sys
import argparse
import colorsys
import itertools
from fractions import Fraction

def zenos_dichotomy():
    for k in itertools.count():
        yield Fraction(1,2**k)

def getfracs():
    """
    [Fraction(0, 1), Fraction(1, 2), Fraction(1, 4), Fraction(3, 4), Fraction(1, 8), Fraction(3, 8), Fraction(5, 8), Fraction(7, 8), Fraction(1, 16), Fraction(3, 16), ...]
    [0.0, 0.5, 0.25, 0.75, 0.125, 0.375, 0.625, 0.875, 0.0625, 0.1875, ...]
    """
    yield 0
    for k in zenos_dichotomy():
        i = k.denominator # [1,2,4,8,16,...]
        for j in range(1,i,2):
            yield Fraction(j,i)

bias = lambda x: (math.sqrt(x/3)/Fraction(2,3)+Fraction(1,3))/Fraction(6,5) # can be used for the v in hsv to map linear values 0..1 to something that looks equidistant

def genhsv(h):
    for s in [Fraction(6,10)]: # optionally use range
        for v in [Fraction(8,10),Fraction(5,10)]: # could use range too
            yield (h, s, v) # use bias for v here if you use range

genrgb = lambda x: colorsys.hsv_to_rgb(*x)

flatten = itertools.chain.from_iterable

gethsvs = lambda: flatten(map(genhsv,getfracs()))

getrgbs = lambda: map(genrgb, gethsvs())

def genhtml(x):
    uint8tuple = map(lambda y: int(y*255), x)
    return uint8tuple
#    return "rgb({},{},{})".format(*uint8tuple)

gethtmlcolors = lambda: map(genhtml, getrgbs())

def isInStory(epn, stories):
    i = -1
    for j, story in enumerate(stories):
        if epn in story:
            i = j
            break
    return i


parser = argparse.ArgumentParser()
parser.add_argument("infile")
parser.add_argument("--output", "-o")
parser.add_argument("--story", action="append")

args = parser.parse_args()

infile = args.infile
if args.output:
    output = args.output
else:
    if ".cd.xml" in infile:
        output = infile.split(".cd.xml")[0]+".colored.cd.xml"
    else:
        output = infile+".colored.cd.xml"
if args.story:
    colors = [tuple(c) for c in list(itertools.islice(gethtmlcolors(), len(args.story)))]
    stories = [s.split(",") for s in args.story]
    ifile = open(infile)
    ofile = open(output,"w")
    string = ""
    inNode = False
    for line in ifile:
        if "<celldesigner:complexSpeciesAlias id=" in line or "<celldesigner:speciesAlias id=" in line:
            inNode = True
            id = line.split('"')[1]
        if "</celldesigner:complexSpeciesAlias>" in line or "</celldesigner:speciesAlias>" in line:
            inNode = False
        if inNode is True and "color" in line:
            i = isInStory(id, stories)
            if i != -1:
                color = colors[i]
                colorhex = "ff"+hex(color[0])[2:]+hex(color[1])[2:]+hex(color[2])[2:]
                line = line.split('"')[0]+'"'+colorhex+'"'+' scheme="Color"/>\n'
        ofile.write(line)
    ifile.close()
    ofile.close()
